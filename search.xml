<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac OS X系统常用工具]]></title>
    <url>%2F2018%2F02%2F12%2FMac-OS-X%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[前言自己使用Mac OS X系统也有一段时间了，也使用过许多MAC上好用的软件，下面是我对使用过和了解的软件资源一些整理。以后可能也会接触使用新的软件，我也会对文章进行更新。 版本控制软件Cornerstone Cornerstone is an elegant SVN client designed specifically for the Mac. It is built on Subversion, a popular version control system well-known for its performance, flexibility, and scalability. Cornerstone excels in tracking &amp; displaying changes to data; its comparison tools enable users to view differences in multi-language formats. Better yet, Planio is now integrated into the Cornerstone environment — so you can now easily sync a local folder with your Planio repositories using your Mac! MAC上一款优雅的SVN客服端，进入公司后，使用的第一款项目版本控制工具就是它了。它是建立在Subversion之上的，因其简洁、灵活、可扩展性而闻名。 官方网站：planioGitHub下载地址百度网盘链接:https://pan.baidu.com/s/1o9O4CGi 密码:fb14 Sourcetree Simplicity and power in a beautiful Git GUI. 一款免费非常值得推荐的Git GUI图形客户端。自己托管在GitHub上的demo就是用的这款软件，使用很方便，免去了git繁琐命令，极大提高了工作效率。 官方网站：Sourcetree相关博客：Sourcetree安装与使用GitHub下载地址百度网盘链接:https://pan.baidu.com/s/1eTJvpMM 密码:urmg Tower Version control with Git - made easy.n a beautiful, efficient, and powerful app. MAC&amp;&amp;Windows平台上最好用的Git GUI客户端。不像Sourcetree，这个款软件是付费的，RMB大概500元左右，不过也有破解版的，我也没有使用过，感觉功能和Sourcetree差不多吧。 官方网址：git-tower百度网盘链接:https://pan.baidu.com/s/1ggmPmkr 密码: 8bm3 GitHubDesktop Extend your GitHub workflow beyond your browser with GitHub Desktop, completely redesigned with Electron. Get a unified cross-platform experience that’s completely open source and ready to customize. 在我搜索MAC上好用的Git GUI客户端时下载用过，功能不是很多，基本的Git操都有，可以自己去了解下吧。 官方网址：GitHubDesktop百度网盘链接:https://pan.baidu.com/s/1bqJ1xgF 密码:8tzk 网络shadowsocks A secure socks5 proxy, designed to protect your Internet traffic. 一个安全的socks5代理，旨在保护你的网络流量。ShadowsocksX-NG有些文件是用swift写的，也是最近才接触，配置VPN时用到。 官网网址：shadowsocksGitHub下载地址百度网盘链接:https://pan.baidu.com/s/1nvZLJFN 密码:cnyv iOS开发工具真机调试包百度网盘链接:https://pan.baidu.com/s/1qZVmja0 密码:nq3s 实用工具LICEcap simple animated screen captures 一款简单好用的屏幕GIF录制软件。比如做demo的时候，录制demo效果。 官网网址：LICEcap相关博客：licecap For Mac安装与使用GitHub下载地址百度网盘链接:https://pan.baidu.com/s/1i6bVLE9 密码:0cni Mounty A tiny tool to re-mount write-protected NTFS volumes under Mac OS X 10.9+ in read-write mode. 一款MAC上mini的NTFS读写软件，相比付费的NTFS读写软件，这款软件值得推荐哦。 官网：Mounty通过Homebrew安装：1brew cask install mounty 百度网盘链接:https://pan.baidu.com/s/1i6BhDOh 密码:rs5j HideSwitch 一款实用小工具，显示和隐藏系统隐藏文件，和Show Or Hide这个款软件类似。 百度网盘链接:https://pan.baidu.com/s/1jJFjxu2 密码:r1kb CleanMyMac MAC系统清理软件，MAC上非常值得推荐的一款软件，不过是需要付费的，不过也有破解版的哦。 官方中文网站：mycleanmymac百度网盘链接:https://pan.baidu.com/s/1o96nJ9g 密码:rphk Alfred Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac. 它是MAC OS X一款可以极大提高操作效率的软件，被人称之为一款神器。我们可以通过快捷键唤出Alfred，然后通过关键词搜索，总之，它是一款强大的软件。我也是最近才安装，了解的也不是很多，有兴趣的朋友可以下载使用吧。 官方网站：Alfred百度网盘链接:https://pan.baidu.com/s/1gg9PNH5 密码:2r19 办公软件office2016 MAC平台下的办公软件。 百度网盘链接:https://pan.baidu.com/s/1mjnuZmo 密码:urz4 Dash Dash is an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 200+ APIs, 100+ cheat sheets and more. You can even generate your own docsets or request docsets to be included. 开发人员不可缺少的杰作。作为一名开发开者，我们可以通过这款软件阅读官方文档，存储代码片段，离线搜索API文档集，开发必备软件。 官方网站：Dash百度网盘链接:https://pan.baidu.com/s/1c3UUEHU 密码:cvu9 iTerm 2 iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.10 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted. MAC上最好用的终端工具。 官方网站：iTerm 2相关博客：MAC上iTerm 2安装与使用]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发常用分类-WBCategories]]></title>
    <url>%2F2018%2F02%2F12%2FiOS%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%88%86%E7%B1%BB-WBCategories%2F</url>
    <content type="text"><![CDATA[前言 You use categories to define additional methods of an existing class—even one whose source code is unavailable to you—without subclassing. You typically use a category to add methods to an existing class, such as one defined in the Cocoa frameworks. The added methods are inherited by subclasses and are indistinguishable at runtime from the original methods of the class. You can also use categories of your own classes to: Distribute the implementation of your own classes into separate source files—for example, you could group the methods of a large class into several categories and put each category in a different file. Declare private methods. You add methods to a class by declaring them in an interface file under a category name and defining them in an implementation file under the same name. The category name indicates that the methods are an extension to a class declared elsewhere, not a new class. 上面是苹果文档对Category的描述，在日常开发过程中，我们也经常用到分类。分类（Category）是OC中的特有语法，它是表示一个指向分类的结构体的指针。原则上它只能增加方法，不能增加成员（实例）变量。关于Category的博文，我也推荐一两篇博文吧，也可自己查找相关的资料： iOS 关于Category ios-category解析WBCategoriesGitHub请戳：WBCategories从最开始和同事一起做项目，到独立做项目，自己在空闲时间整理了项目开发过程中常用分类，分类文件主要包含系统框架如下： UIKit Foundation AVFoundation CoreTelephony QuartzCore 最开始这些分类文件也挺零散的，大部分分类方法都是在网上查询资料，也参考了一些大神在Github上开源库，比如：JKCategories、YYCategories等优秀开源库，这两个库整理的分类方法也相当的完善，开发中常用的方法都包含了，在这里非常感谢大神的无私分享。 常用分类方法WBCategories参考整理了许多优秀分类方法，有很多也是自己平时在开发项目中记录整理，比如自己开发过程使用的宏定义也包含在这个项目中。其实最开始我也想用这个项目制作一个pod库，但考虑到在实际项目开发过程中，并不是所有的分类文件都用到，而是需要哪些拷贝到项目中就可以了。等以后有时间制作一个pod开源库吧，现在的水平还是达不到😄。不过这个项目我也会持续更新。下面介绍一些自己在项目中开发用的比较多的方法吧！ FoundationNSString 计算文字size（使用较多） 1234567891011/** * 计算文字size * * @param size 限制size * @param font 字体 * @param lineBreakMode 换行格式 * @return 文字size */- (CGSize)wb_sizeForFont:(UIFont *)font size:(CGSize)size mode:(NSLineBreakMode)lineBreakMode; UIWebView自适应图片高度（使用较多） 123456789/** Auto fit image height,font size @param htmlString htmlString description @param fontSize The font szie @return return value description */+ (NSString *)wb_autoFitImageSize:(NSString *)htmlString fontSize:(CGFloat)fontSize; 判断字符串非空 12345/** * 判断是否为空字符串（使用较多） * */+ (BOOL)wb_isNull:(NSString *)object; NSObject json字符串转化NSArray/NSDictionary（使用较多） 1234567/** json字符串转化NSArray/NSDictionary @param jsonString json字符串 @return NSArray/NSDictionary */+ (id)wb_jsonStringToObject:(NSString *)jsonString; NSArray/NSDictionary转json字符串（使用较多） 1234567/** NSArray/NSDictionary转json字符串 @param object NSArray/NSDictionary @return json字符串 */+ (id)wb_objectConvertToJsonSting:(id)object; NSDate 通过时间戳计算时间差（使用较多）123456/** * 通过时间戳计算时间差 * * @param compareDate 时间戳 */+ (NSString *)wb_compareCurrentTime:(NSTimeInterval) compareDate; UIKitUINavigationItem 设置导航按钮左右间距，适配iOS11（使用较多）12345678@interface UINavigationItem (Margin)@property (nonatomic, assign) CGFloat leftMargin;@property (nonatomic, assign) CGFloat rightMargin;+ (CGFloat)systemMargin;@end UIButton 扩大按钮点击区域（使用较多） 1@property (nonatomic, assign) UIEdgeInsets wb_touchAreaInsets; 按钮倒计时（使用较多） 12345678/** * 设置按钮倒计时 * * @param time 倒计时时间 * @param button 对象按钮 */+ (void)wb_showCountDownTime:(NSUInteger)time inButton:(UIButton *)button; 调整按钮图片位置（使用较多） 123456789/** 利用UIButton的titleEdgeInsets和imageEdgeInsets来实现文字和图片的自由排列 注意：这个方法需要在设置图片和文字之后才可以调用，且button的大小要大于 图片大小+文字大小+spacing @param position image pisition @param spacing image &amp; title distance */- (void)wb_setImagePosition:(WBImagePosition)position spacing:(CGFloat)spacing; 按钮点击Block回调（使用较多） 123456/** 按钮点击block回调 @param block block description */- (void)wb_addActionHandler:(WBButtonBlock)block; UIImageView SDWebImageView设置图片交叉渐变效果 12345678/** Set imageView image with animaton type kCATransitionFade. @param url image url string. @param placeholder placeholder string. */- (void)wb_setImageWithFadeAnimation:(NSString *)url placeholderImage:(NSString *)placeholder; 异步下载图片并缓存图片 1234567891011/** * Set the imageView `image` with an `url` string and a placeholder. * * The download is asynchronous and cached. * * @param url The url string for the image. * @param placeholder The image url string to be set initially, until the image request finishes. * @see sd_setImageWithURL:placeholderImage:options: */- (void)wb_setImageWithURL:(NSString *)url placeholderImage:(NSString *)placeholder; UIDevice 获取设备uuid123456/** also known as udid/uniqueDeviceIdentifier but this doesn't persists to system reset,we can use it to identifier user. @return uuid string. */- (NSString *)wb_uuid; UIImage 根据颜色生成图片（使用较多）123456/** Create and return a 1x1 point size image with the given color. @param color The color. */+ (nullable UIImage *)wb_imageWithColor:(UIColor *)color; UIColor 从十六进制字符串获取颜色（使用较多） 12345678910/** * 从十六进制字符串获取颜色 * * @param color 支持@“#123456”、 @“0X123456”、 @“123456”三种格式 * @param alpha 颜色透明度 * @return 十六进制颜色 */+ (UIColor *)wb_colorWithHexString:(NSString *)color alpha:(CGFloat)alpha;+ (UIColor *)wb_colorWithHexString:(NSString *)color; RGB颜色（使用较多） 123+ (UIColor *)wb_rgbColorWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue; UITextView 设置UITextView占位文字（使用较多）12345@property (nonatomic, strong) IBInspectable NSString *placeholder;@property (nonatomic, strong) NSAttributedString *attributedPlaceholder;@property (nonatomic, strong) IBInspectable UIColor *placeholderColor;+ (UIColor *)defaultPlaceholderColor; UIViewController 移除系统UITabBarButton，自定义tabbar用到1234/** Remove system tabbarButton */- (void)wb_removeTabbarButton; UISearchBar 获取UISearchBar的textField123456/** Get search textField. @return UITextField */- (UITextField *)wb_searchField; UIBarButtonItem 设置数字提示12345678910111213141516171819202122232425@interface UIBarButtonItem (WBBadge)@property (strong, atomic) UILabel *badge;// Badge value to be display@property (nonatomic) NSString *badgeValue;// Badge background color@property (nonatomic) UIColor *badgeBGColor;// Badge text color@property (nonatomic) UIColor *badgeTextColor;// Badge font@property (nonatomic) UIFont *badgeFont;// Padding value for the badge@property (nonatomic) CGFloat badgePadding;// Minimum size badge to small@property (nonatomic) CGFloat badgeMinSize;// Values for offseting the badge over the BarButtonItem you picked@property (nonatomic) CGFloat badgeOriginX;@property (nonatomic) CGFloat badgeOriginY;// In case of numbers, remove the badge when reaching zero@property BOOL shouldHideBadgeAtZero;// Badge has a bounce animation when value changes@property BOOL shouldAnimateBadge;@end UIView 单击长按手势block回调12345678910111213/** Add tap gesture with block. @param handler block handler */- (void)wb_addTapGestureWithHandler:(WBTapGestureBlock)handler;/** Add long press gusture with block. @param handler block handler */- (void)wb_addLongPressGestureWithHandler:(WBLongPressGestureBlock)handler; QuartzCoreCABasicAnimation 点赞动画1234/** Praise animation */- (void)wb_likeAnimation; CAKeyframeAnimation spring放大动画 123456/** Spring animation. @param duration 动画时长 */- (void)wb_springAnimation:(NSTimeInterval)duration; 旋转动画 123- (void)wb_rotateXWithAngle:(CGFloat)angle diretion:(WBRotateDiretion)diretion duration:(NSTimeInterval)duration Marco 设置平方字体 12/** &lt; 设置平方字体PingFangSC &gt; */#define kWB_PFR kWB_SYSTEM_VERSION_9_OR_LATER ? @"PingFangSC-Regular" : @"PingFang SC" 清除警告宏 1234567891011121314151617181920212223242526/** &lt;&lt; 忽略PerformSelector警告 &gt; */#define SUPPRESS_PerformSelectorLeak_WARNING(Stuff) \do &#123; \_Pragma("clang diagnostic push") \_Pragma("clang diagnostic ignored \"-Warc-performSelector-leaks\"") \Stuff; \_Pragma("clang diagnostic pop") \&#125; while (0)/** &lt;&lt; 忽略未定义方法警告 &gt; */#define SUPPRESS_Undeclaredselector_WARNING(Stuff) \do &#123; \_Pragma("clang diagnostic push") \_Pragma("clang diagnostic ignored \"-Wundeclared-selector\"") \Stuff; \_Pragma("clang diagnostic pop") \&#125; while (0)/** &lt;&lt; 忽略过期API警告 &gt; */#define SUPPRESS_DEPRECATED_WARNING(Stuff) \do &#123; \_Pragma("clang diagnostic push") \_Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"") \Stuff; \_Pragma("clang diagnostic pop") \&#125; while (0) iOS 11滚动视图适配 123456789101112/** &lt; Adaptive &gt; */#define kWB_AdjustsScrollViewInsets_NO(scrollView,vc)\do &#123; \_Pragma("clang diagnostic push") \_Pragma("clang diagnostic ignored \"-Warc-performSelector-leaks\"") \if ([UIScrollView instancesRespondToSelector:NSSelectorFromString(@"setContentInsetAdjustmentBehavior:")]) &#123;\[scrollView performSelector:NSSelectorFromString(@"setContentInsetAdjustmentBehavior:") withObject:@(2)];\&#125; else &#123;\vc.automaticallyAdjustsScrollViewInsets = NO;\&#125;\_Pragma("clang diagnostic pop") \&#125; while (0) 适配宏 12/** &lt; 屏幕适配 ipone6/6s 控件宽高 字体大小都可以用这个宏 &gt; */#define kWB_AUTOLAYOUTSIZE(size) ((size) * (SCREEN_WIDTH / 375)) iPhone X相关 12345678910111213141516/** &lt; 判断是否是iPhone X &gt; */#define kWB_IS_IPHONE_X ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)/** &lt; 导航栏高度 无largeTitle &gt; */#define kWB_NAVIGATIONBAR_HEIGHT 44/** &lt; 状态栏高度 &gt; */#define kWB_STATUSBAR_HEIGHT [UIApplication sharedApplication].statusBarFrame.size.height/** &lt; 整个导航栏高度 &gt; */#define kWB_NAVI_HEIGHT (kWB_IS_IPHONE_X ? (88) : (64))/** &lt; 标签栏高度 &gt; */#define kWB_TABBAR_HEIGHT (kWB_IS_IPHONE_X ? (83) : (49))/** &lt; iOS 11 底部安全域距离 &gt; */#define kWB_BOTTOM_SAFEAREA_HEIGHT (kWB_IS_IPHONE_X ? (34) : (0))/** &lt; 判断 iOS 11 或更高的系统版本 &gt; */#define kWB_SYSTEM_VERSION_11_OR_LATER SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"11.0") 单例宏定义 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** &lt; 单例ARC&amp;MRC宏定义 &gt; *//** &lt; .h &gt; */#define singletonH(name) +(instancetype)share##name;/** &lt; .m &gt; */#if __has_feature(objc_arc)//ARC#define singleM(name) static id _instance;\+(instancetype)allocWithZone:(struct _NSZone *)zone\&#123;\static dispatch_once_t onceToken;\dispatch_once(&amp;onceToken, ^&#123;\_instance = [super allocWithZone:zone];\&#125;);\return _instance;\&#125;\\+(instancetype)share##name\&#123;\return [[self alloc]init];\&#125;\-(id)copyWithZone:(NSZone *)zone\&#123;\return _instance;\&#125;\\-(id)mutableCopyWithZone:(NSZone *)zone\&#123;\return _instance;\&#125;#else//非ARC#define singleM static id _instance;\+(instancetype)allocWithZone:(struct _NSZone *)zone\&#123;\static dispatch_once_t onceToken;\dispatch_once(&amp;onceToken, ^&#123;\_instance = [super allocWithZone:zone];\&#125;);\return _instance;\&#125;\\+(instancetype)shareTools\&#123;\return [[self alloc]init];\&#125;\-(id)copyWithZone:(NSZone *)zone\&#123;\return _instance;\&#125;\-(id)mutableCopyWithZone:(NSZone *)zone\&#123;\return _instance;\&#125;\-(oneway void)release\&#123;\&#125;\\-(instancetype)retain\&#123;\return _instance;\&#125;\\-(NSUInteger)retainCount\&#123;\return MAXFLOAT;\&#125;#endif 结语上面这些方法是我在项目中使用的较多的方法，当然分类方法也不止我贴出的这些，有兴趣的朋友可以到我的GitHub上查看，WBCategories有些分类是我自己写的，如果有写的不对的地方，欢迎批评指正，我也会第一时间修改，如果对你有帮助也请star一个吧。Finally，I will continue update it!]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC上iTerm 2安装与使用]]></title>
    <url>%2F2018%2F02%2F12%2FMAC%E4%B8%8AiTerm-2%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言iTerm2是MAC下最好用的终端工具，并且还是免费的。iTerm2 是配置完毕开箱即用的 tmux，有标签变色、智能选中等特色功能。在日常开发中，我们难免会与终端命令打交道，比如使用Git，CocoaPods，Homebrew，Hexo等，下面开始介绍自定义终端样式吧！ 目录 下载安装iTerm 2 安装powerline 安装oh-my-zsh 安装字体库fonts 导入配色 主题设置 添加指令高亮效果zsh-syntax-highlighting 快捷键 问题解决 下载安装iTerm 2 GitHub 安装powerline12345//没有安装pip先安装pipsudo easy_install pip//之后安装powerline（这里可能会报错，可以参考问题解决）pip install powerline-status 安装oh-my-zsh1curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 安装字体库fonts123456//克隆字体库到本地git clone https://github.com/powerline/fonts.git//安装字体cd fonts./install.sh 安装成功之后输出：123➜ fonts git:(master) ./install.shCopying fonts...Powerline fonts installed to /Users/WENBO/Library/Fonts 导入配色 首先到GitHub下载solarized 1git clone [https://github.com/altercation/solarized](https://github.com/altercation/solarized) 解压zip文件，进入solarized/iterm2-colors-solarized文件，双击Solarized Dark.itermcolors和Solarized Light.itermcolors进行安装导入，如下图所示 进入系统偏好设置，profiles-&gt;Colors选择刚刚导入的配色方案即可主题设置 使用agnoster，下载安装： 123456//克隆主题到本地git clone [https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor](https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor)//安装主题cd oh-my-zsh-agnoster-fcamblor./install 安装成功之后，编辑~/.zshrc文件，将 ZSH_THEME改为 agnoster 1234# Set name of the theme to load. Optionally, if you set this to "random"# it'll load a random theme each time that oh-my-zsh is loaded.# See https://github.com/robbyrussell/oh-my-zsh/wiki/ThemesZSH_THEME="agnoster" 添加指令高亮效果zsh-syntax-highlighting 下载文件 12//克隆项目到本地git clone git://github.com/zsh-users/zsh-syntax-highlighting.git 编辑.zshrc文件，在最后添加如下内容 12source /Users/WENBO/zsh-syntax-highlighting/zsh-syntax-highlighting.zshplugins=(zsh-syntax-highlighting) 注意1/Users/WENBO是*.zshrc文件所在路径，这里替换成你自己的就好了 设置成功之后，效果如下： 快捷键自己也才安装，先记录下来吧。 说明 快捷键 新建标签 command + t 关闭标签 command + w 切换标签 command + 数字 command + 左右方向键 切换全屏 command + enter 查找 command +f 垂直分屏 command + d 水平分屏 command + shift + d 切换屏幕 command + option + 方向键 command + [ 或 command + ] 查看历史命令 command + ; 查看剪贴板历史 command + shift + h 清除当前行 ctrl + u 到行首 ctrl + a 到行尾 ctrl + e 前进后退 ctrl + f/b (相当于左右方向键) 上一条命令 ctrl + p 搜索命令历史 ctrl + r 删除当前光标的字符 ctrl + d 删除光标之前的字符 ctrl + h 删除光标之前的单词 ctrl + w 删除到文本末尾 ctrl + k 交换光标处文本 ctrl + t 清屏1 command + r 清屏2 ctrl + l 问题解决 brew link python报错12sudo mkdir /usr/local/Frameworkssudo chown $(whoami):admin /usr/local/Frameworks 之后执行，链接成功1brew link python 安装powerline报错Permission denied，原因是没有安装python,，通过homebrew安装python 1brew install python 命令显示？号，如下图所示：解决办法：进入Preference-&gt;Profiles-&gt;Text，做如下配置即可： 结语在掘金上发现了这款终端工具，自己平时也有用到终端工具，于是就尝试给自己的MAC装上这款软件，在安装过程中还是遇到一些问题，不过最后都解决了。如果你也爱好终端命令操作，可以尝试DIY你喜欢的终端样式哦。 参考文章 iTerm 2 &amp;&amp; Oh My Zsh【DIY教程——亲身体验过程】 Mac终端iTerm2配置]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最新MBProgressHUD封装]]></title>
    <url>%2F2018%2F02%2F02%2F%E6%9C%80%E6%96%B0MBProgressHUD%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[前言 在我们平时做项目的时候，为了提高交互体验，难免会用到一些提示语。除了UI上有特殊的要求需要自定义提示UI，一般会选择GitHub上一些知名的提示框架库，如： MBProgressHUD SVProgressHUD JGProgressHUD Toast 之前做项目都是用的SVProgressHUD，这个三方提示库使用非常接单，基于这个库，也很好做自定义提示封装。后来做项目改成了MBProgressHUD，相对于SVProgressHUD，MBProgressHUD使用相对来说要麻烦一点，因此，我对MBProgressHUD一些常用提示进行了封装，最开始封装的工具类存在着一些缺点，比如说在网络请求的时候，如果网络不好，拿不到回调，MBProgressHUD就会一直显示，用户无法交互，因此对这个工具类进行了改进。 MBProgressHUD(v1.1.0)我主要写了一个分类，有菊花、文字、文字+图片提示，并提供了显示完成对调，方便显示完成后进行相应的操作或界面跳转，提供的调用方法如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#pragma mark ------ &lt; Mask Layer &gt; ------#pragma mark/** &lt;&lt; 设置是否显示蒙层 &gt; */+ (void)wb_maskLayerEnabled:(BOOL)enabled;#pragma mark -------- Basic Method --------#pragma mark/** * 快速创建提示框 有菊花 * * @param message 提示信息 * @param view 显示视图 * @return hud */+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message toView:(UIView *)view;/** * 显示提示文字 * * @param message 提示信息 * @param view 显示的视图 */+ (void)wb_showMessage:(NSString *)message toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** * 自定义成功提示 * * @param success 提示文字 * @param view 显示视图 */+ (void)wb_showSuccess:(NSString *)success toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** * 自定义失败提示 * * @param error 提示文字 * @param view 显示视图 */+ (void)wb_showError:(NSString *)error toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** * 自定义提示信息 * * @param info 提示信息 * @param view 示视图 */+ (void)wb_showInfo:(NSString *)info toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** * 自定义警告提示 * * @param warning 提示信息 * @param view 示视图 */+ (void)wb_showWarning:(NSString *)warning toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** * 自定义提示框 * * @param text 提示文字 * @param icon 图片名称 * @param view 展示视图 */+ (void)wb_show:(NSString *)text icon:(NSString *)icon view:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;#pragma mark -------- Activity &amp;&amp; Text --------#pragma mark/** &lt; 只显示菊花 &gt; */+ (MBProgressHUD *)wb_showActivity;/** &lt; 菊花带有文字 &gt; */+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message;#pragma mark -------- Text &amp;&amp; Image --------#pragma mark/** 文字提示 @param message 提示文字 @param completion 完成回调 */+ (void)wb_showMessage:(NSString *)message completion:(MBProgressHUDCompletionBlock)completion;/** 成功提示 @param success 提示文字 @param completion 完成回调 */+ (void)wb_showSuccess:(NSString *)success completion:(MBProgressHUDCompletionBlock)completion;/** 错误提示 @param error 提示文字 @param completion 完成回调 */+ (void)wb_showError:(NSString *)error completion:(MBProgressHUDCompletionBlock)completion;/** 信息提示 @param info 提示文字 @param completion 完成回调 */+ (void)wb_showInfo:(NSString *)info completion:(MBProgressHUDCompletionBlock)completion;/** 警告提示 @param warning 提示文字 @param completion 完成回调 */+ (void)wb_showWarning:(NSString *)warning completion:(MBProgressHUDCompletionBlock)completion; 举一个.m显示菊花方法的例子吧，MBProgressHUD最新版本对比老版本API还是有些变化的：12345678910111213141516171819+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message toView:(UIView *)view &#123; if (!view) view = [UIApplication sharedApplication].delegate.window; /** 快速显示提示信息 */ MBProgressHUD * hud = [MBProgressHUD showHUDAddedTo:view animated:YES]; /** &lt; 显示动画效果 &gt; */ hud.animationType = MBProgressHUDAnimationZoom; /** &lt; 文字内容 &gt; */ hud.label.text = message; /** &lt; 影藏后移除视图 &gt; */ hud.removeFromSuperViewOnHide = YES; /** 中间方框背景色 */ hud.bezelView.color = [[UIColor blackColor] colorWithAlphaComponent:0.85f]; /** 内容颜色 */ hud.contentColor = [UIColor whiteColor]; /** &lt; 最小显示时间 &gt; */ hud.minShowTime = kActivityMinDismissTime; [self wb_configMaskLayer:hud]; return hud;&#125; 具体详情，请戳：WBMBProgressHUDManager 结语 选择哪一款提示框架，都要看自己喜好了，因为我代码水平有限，有些地方可能考虑的不够完善，只能说是抛砖引玉吧，大神们可能有更好的封装。要想基于这些框架自定义出自己需要风格的UI，还是要对框架提供的方法属性有一定的了解。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UITableViewCell自适应图片高度]]></title>
    <url>%2F2018%2F01%2F31%2FUITableViewCell%E8%87%AA%E9%80%82%E5%BA%94%E5%9B%BE%E7%89%87%E9%AB%98%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[一、问题描述 最近在做公司项目的时候，遇到了前端上传多张图片到七牛服务器后，前端在列表展示图片适配的问题。一开始我设置的固定高度，因为图片尺寸不是固定的，会出现不同程度的拉伸情况，用户体验也很不好。通过设置图片视图contentMode这个属性，虽然能保证图片不被拉伸，但图片会出现显示不全的问题。 二、解决思路1、后台返回每张图片的宽高，根据比例去计算图片的高度2、获取到image，image有size这个属性，可以拿到宽高，根据比例去计算图片的高度三、最终采用方案第一种方案是可以实现图片的适配问题，我采用了第二种。图片都是网络加载的，要想拿到image，就必须要将图片下载下来，这样就可以获取到图片的尺寸。下面贴出我实现的关键步骤吧。 1、工程导入SDWebImage和Masonry,导入相关头文件。2、SDWebImage下载图片，并计算出图片高度，将高度缓存到字典。自定义cell用Masonry设置好上下左右约束，也可以是xib。1234567891011121314151617181920212223- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123; ImageViewCell *cell = [tableView dequeueReusableCellWithIdentifier:kIdentifier forIndexPath:indexPath]; cell.selectionStyle = UITableViewCellSelectionStyleNone; NSString *url = self.imageUrlArray[indexPath.row]; [cell.autoImageView sd_setImageWithURL:[NSURL URLWithString:url] placeholderImage:nil options:SDWebImageRetryFailed completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) &#123; if (image.size.height) &#123; /** &lt; 图片宽度 &gt; */ CGFloat imageW = [UIScreen mainScreen].bounds.size.width - 2 * 15; /** &lt;根据比例 计算图片高度 &gt; */ CGFloat ratio = image.size.height / image.size.width; /** &lt; 图片高度 + 间距 &gt; */ CGFloat imageH = ratio * imageW + 15; /** &lt; 缓存图片高度 没有缓存则缓存 刷新indexPath &gt; */ if (![[self.heightDict allKeys] containsObject:@(indexPath.row)]) &#123; [self.heightDict setObject:@(imageH) forKey:@(indexPath.row)]; [self.tableView beginUpdates]; [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone]; [self.tableView endUpdates]; &#125; &#125; &#125;]; return cell;&#125; 注意 字典key也可以是图片地址url 因为图片下载是异步的，要在下载完成图片之后，如果字典没有缓存当前indexPath高度，需要手动去刷新一次indexPath(最开始的时候，我没有根据key去判断是否需要刷新，当cell滑动的时候，会不停的调用cellForRowAtIndexPath这个方法，会不停的刷新，这样也非常耗费性能)。3、cell高度代理方法返回缓存的图片高度123- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123; return [[self.heightDict objectForKey:@(indexPath.row)] floatValue];&#125; 到这里，就已经实现了图片自适应高度的需求了，具体详情，请看测试UITableViewCellAutoImageHeight。实现这个需求，自己也折腾了一段时间，上面的方法现在也能满足项目的需求，但是在UI效果上感觉还是有一些不完美之处。如果大神有更好的实现方案和优化方法，希望能多多交流学习。如果以后有更好的实现方案，我也会在这篇文章中记录下来。 四、结语 2017年还剩两天，这篇文章也是今年写的最后一篇文章吧，写文章的初衷也是为了记录自己学习成长的点滴，同时也希望能够帮助到需要的人。2017就要结束了，自己的期望也未达到，希望在即将到来的2018年，自己更加努力，能够实现自己的期望与目标。奋斗吧，少年！]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让你的工程支持WebP格式图片]]></title>
    <url>%2F2018%2F01%2F31%2F%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%94%AF%E6%8C%81WebP%E6%A0%BC%E5%BC%8F%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[前言 最近在公司做类似与朋友圈动态展示图片的时候，无意间接触到了WebP格式图片。WebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。下面开始介绍几种让工程支持WebP方法吧😀。 一、通过SDWebImage三方图片加载库实现1、通过CocoaPods方式在工程的podfile中添加12pod 'SDWebImage'pod 'SDWebImage/WebP' 注意：因为libwebp(0.5.1)是谷歌的库，下载需要翻墙。通常会报以下错误，如果确实下不下来，只能通过手动方式导入相关库了： 2、手动导入方式1、将SDWebImage(4.1.0)拖入到工程，如下图：2、下载libwebp库（需要翻墙）我下的版本是0.5.1没有打包成framework，所以我把自己也尝试将库文件打包成静态framework，打包出来目录如下：3、 设置target－&gt;build setting－&gt;搜索preprocessor 添加SD_WEBP=1,如下图：好了，配置已经完成，现在工程已经支持WebP显示了，我的项目里都是加载的网络WebP格式图片，我写了一个WebPDemo_Method1能够显示本地WebP图片。在我的电脑能翻墙的时候也把其他版本的libwebp库(libwebp_V0.5.1、ibwebp_V0.5.2、libwebp_V0.6.0)下了下来,0.5.1是我自己打的包，另外两个版本是官方打好的包，有需要的可以自行下载相应的版本。 注意1、导入工程的libwebp库，不一定非要framework,也可以就把相应的库文件导入到工程，只需要注意头文件导入名称就可以了。2、demo中，我并没有用SDWebImage(4.1.0)的原UIImage+WebP.h和UIImage+WebP.m文件，而是对头文件做了一定修改，如果工程用最新的SDWebImage报错，可以用我demo中UIImage+WebP文件下的两个文件。 报错解决1、我自己打的静态库framework在工程运行时报错，因为framework用到了系统的库。1－－include of non-modular header inside XXXX 解决办法是：Allow Non-modular includes in Framework Modules 设置为YES，如下图：重新运行工程，没有报错，可以正常显示WebP格式图片了。 二、通过YYWebImage(2017-12-28更新)最近在看YYKit组件的时候，发现YYWebImage也支持webp格式片，集成使用也相当方便。 1、CocoaPods导入12pod 'YYWebImage'pod 'YYImage/WebP` 2、手动导入将YYWebImage和vendor文件夹拖入到工程。目录结构如下： [图片上传失败…(image-20a4e3-1515331945147)] 具体使用 导入头文件 123#import "YYWebImage.h"或#import &lt;YYWebImage.h&gt; 设置图片地址 12345 /** &lt;&lt; 1、本地加载 &gt; */// NSString *path = [[NSBundle mainBundle] pathForAuxiliaryExecutable:@"test.webp"];// _imageView.yy_imageURL = [NSURL fileURLWithPath:path]; /** &lt;&lt; 2、网络加载 &gt; */ _imageView.yy_imageURL = [NSURL URLWithString:@"https://user-gold-cdn.xitu.io/2017/12/28/1609d17b5af17a56?w=534&amp;h=300&amp;f=webp&amp;s=39334"]; 好了，通过YYWebImage也实现了webp格式图片的显示，要查看更多YYWebImage的用法，可以到GitHub上查看使用文档。顺便也贴出测试WebPDemo_Method2。 测试图片(webp格式) [图片上传失败…(image-cc9028-1515331945147)] 总结 当然，支持WebP显示的方法也不止通过三方库的方式，也可以通过webView方式，还可以通过NSURLProtocol方式，如果需要用到以上两种方式，可以自行研究一下。如果大家有更好的方法或者建议，欢迎大家一起讨论。 参考文章1、webP 格式图片在 iOS 中的应用 2、SDWebImage支持webp格式的图片 3、ios开发中报错处理－－include of non-modular header inside XXXX 4、How to support webp?]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS定时器-NSTimer、CADisplayLink、GCD]]></title>
    <url>%2F2018%2F01%2F31%2FiOS%E5%AE%9A%E6%97%B6%E5%99%A8-NSTimer%E3%80%81CADisplayLink%E3%80%81GCD%2F</url>
    <content type="text"><![CDATA[#前言在最近的项目开发过程中，遇到了需要运用定时器的需求，在以前的项目中，也没用过定时器。最近做的一个项目很有几个地方用到了定时器，短信验证码倒计时、倒计时取消订单，定时网络请求。在查阅相关资料过后，也解决了项目中的需求。下面介绍下几种定时器的用法吧！ #CADisplayLinkCADisplayLink是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的 CADisplayLink 对象，把它添加到一个runloop中，并给它提供一个 target 和selector 在屏幕刷新的时候调用。 创建 123456789/** &lt; 创建CADisplayLink &gt; */self.displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(printSeconds)];/** &lt; 设置每秒刷新一次 The default value is 60 &gt; */self.displayLink.preferredFramesPerSecond = 1;/** &lt; 注册到RunLoop中 NSDefaultRunLoopMode &gt; */[self.displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];/** &lt; 暂停定时器 Initial state is false &gt; */self.displayLink.paused = YES; 暂停 12- 开始 ``` self.displayLink.paused = NO; 销毁 123 /** &lt; 销毁定时器 &gt; */[self.displayLink invalidate];self.displayLink = nil; 最后CADisplayLink相比NSTimer来说，精度要高的多，如果有想更深入的了解可以查看官方文档或相关博客（CADisplayLink）介绍的很详细。 NSTimer在最近开发的项目中，用NSTimer实现了定时请求接口，后台服务器要对前端App状态进行检测，要求App在用户登录的状态下，每30s请求一次接口，以便后台更好的处理先关业务逻辑。在App中只处理了在前台的情况，App处于后台，NSTimer会处于挂起状态，不执行，除非申请后台执行代码的权限。下面介绍NSTimer的基本使用方法。 NSTimer创建常用的有两种创建方法,区别是前者需手动加入RunLoop，后者自动将timer加入到当前线程的RunLoop中1234//+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(nullable id)userInfo repeats:(BOOL)yesOrNo;//+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(nullable id)userInfo repeats:(BOOL)yesOrNo; Block方法，iOS 10新出的API，使用这个两个方法，要考虑到兼容性问题12+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^)(NSTimer *timer))block API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0));+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^)(NSTimer *timer))block API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0)); 其它创建方法请参考头文件方法声明 timerWithTimeInterval 创建1self.timer = [NSTimer timerWithTimeInterval:1.f target:self selector:@selector(printSeconds) userInfo:nil repeats:YES]; TimeInterval：执行之前等待的时间。比如设置成1.0，就代表1秒后执行方法 target：需要执行方法的对象 selector：需要执行的方法 repeats：是否需要循环 添加到Runloop（注意：上面这种方法创建的定时器必须添加到Runloop，否则定时器不会执行）12345678910111213141516 /** &lt; Default mode（NSDefaultRunLoopMode） 默认模式中几乎包含了所有输入源(NSConnection除外),一般情况下应使用此模式。 Connection mode（NSConnectionReplyMode） 处理NSConnection对象相关事件，系统内部使用，用户基本不会使用。 Modal mode（NSModalPanelRunLoopMode） 处理modal panels事件。 Event tracking mode（UITrackingRunLoopMode） 在拖动loop或其他user interface tracking loops时处于此种模式下，在此模式下会限制输入事件的处理。例如，当手指按住UITableView拖动时就会处于此模式。 Common mode（NSRunLoopCommonModes） 这是一个伪模式，其为一组run loop mode的集合，将输入源加入此模式意味着在Common Modes中包含的所有模式下都可以处理。在Cocoa应用程序中，默认情况下Common Modes包含default modes,modal modes,event Tracking modes.可使用CFRunLoopAddCommonMode方法想Common Modes中添加自定义modes。 &gt; */[[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSDefaultRunLoopMode]; scheduledTimerWithTimeInterval123/** &lt; 第二种创建方法 自动加入当前线程的RunLoop中，如果想让定时器不受滚动视图影响 应设置Mode为：NSRunLoopCommonModes &gt; */ self.timer = [NSTimer scheduledTimerWithTimeInterval:1.f target:self selector:@selector(printSeconds) userInfo:nil repeats:YES];// [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes]; 暂停、开始定时器 123456789/** &lt; 开始定时器 &gt; */if (self.timer.isValid) &#123; self.timer.fireDate = [NSDate date];&#125;/** &lt; 暂停定时器 &gt; */if (self.timer.isValid) &#123; self.timer.fireDate = [NSDate distantFuture];&#125; 销毁定时器 12[self.timer invalidate];self.timer = nil; GCD定时器在项目中，短信验证码倒计时，和订单定时取消，都用到了GCD定时器，GCD定时器相对来说更为精准，但创建起来稍微麻烦点，下面就介绍基本用法吧！ 创建 1234567891011121314151617//获取队列，这里获取全局队列（tips：可以单独创建一个队列跑定时器）dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);//创建定时器（dispatch_source_t本质还是个OC对象）self.timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);//start参数控制计时器第一次触发的时刻，延迟0sdispatch_time_t start = dispatch_time(DISPATCH_TIME_NOW, 0 * NSEC_PER_SEC);// dispatch_time_t start = dispatch_walltime(NULL, 0);//每隔1s执行一次uint64_t interval = (uint64_t)(1.0 * NSEC_PER_SEC);dispatch_source_set_timer(self.timer, start, interval, 0);dispatch_source_set_event_handler(self.timer, ^&#123; //要执行的任务&#125;);//开始执行定时器dispatch_resume(self.timer); 开始定时器 1dispatch_resume(self.timer); 暂停定时器 1dispatch_suspend(self.timer); 取消定时器 12dispatch_cancel(self.timer);self.timer = nil; 总结 公司的项目刚刚上线，稍微可以松动一下，自己花时间整理了一下定时器的实现方式，除了CADisplayLink，后两种定时器在项目中都用到了。使用的时候要注意定时器和Runloop之间的联系、以及定时器的销毁问题。我也是查阅了相关资料和结合项目中的实际应用整理出来的，如果有写的不对的地方，欢迎大家批评指正。希望文章能给需要的人有所帮助。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC上Homebrew常用命令]]></title>
    <url>%2F2018%2F01%2F30%2FMAC%E4%B8%8AHomebrew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[一、官方网址Homebrew 二、目录 安装 查看帮助信息 查看版本 更新Homebrew自己 安装软件包 查询可更新的包 更新包 (formula) 清理旧版本 锁定不想更新的包 卸载安装包 查看包信息 查看安装列表 查询可用包 卸载Homebrew 三、常用命令 安装 1234//安装依赖工具xcode-select --install/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 查看帮助信息 1brew help 查看版本 1brew -v 更新Homebrew自己 1brew update 安装软件包 12345678910111213brew install [包名]//安装gitbrew install git//安装git-lfsbrew install git-lfs//安装wgetbrew install wget//安装opensslbrew install openssl 查询可更新的包 1brew outdated 更新包 (formula) 12345//更新所有brew upgarde//更新指定包brew upgarde [包名] 清理旧版本 12345678//清理所有包的旧版本brew cleanup //清理指定包的旧版本brew cleanup [包名]//查看可清理的旧版本包，不执行实际操作brew cleanup -n 锁定不想更新的包 1234//锁定某个包brew pin $FORMULA //取消锁定brew unpin $FORMULA 卸载安装包 1234brew uninstall [包名]//例：卸载gitbrew uninstall git 查看包信息 1brew info [包名] 查看安装列表 1brew list 查询可用包 1brew search [包名] 卸载Homebrew 1234567cd `brew --prefix`rm -rf Cellarbrew prunerm `git ls-files`rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributionsrm -rf .gitrm -rf ~/Library/Caches/Homebrew 四、参考文章 1、你应该定期更新 Homebrew 2、Homebrew简介和基本使用 3、Mac上Homebrew的使用 (Homebrew 使 OS X 更完整) 4、HomeBrew的安装和简单使用 5、Mac OS下包管理器Homebrew的安装与使用]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>HomeBrew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下CocoaPods安装与使用]]></title>
    <url>%2F2018%2F01%2F24%2FMac%E4%B8%8BCocoaPods%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言 在开发项目的时候，难免会导入一些三方开源库，CocoaPods是OS X管理三方开源库的工具，用这个工具，我们可以轻松集中管理、更新三方开源库。下面开始介绍CocoaPods安装与使用吧。 介绍内容目录 一、安装RVM 二、升级RubyGems 三 、CocoaPods安装 四 、CocoaPods使用一、安装RVM 安装RVM命令如下： 1curl -L get.rvm.io | bash -s stable 查看rvm版本 1rvm -v 更新RVM 1rvm get stable 查看可下载的ruby版本 1rvm list known 输出结果为：123456789101112# MRI Rubies[ruby-]1.8.6[-p420][ruby-]1.8.7[-head] # security released on head[ruby-]1.9.1[-p431][ruby-]1.9.2[-p330][ruby-]1.9.3[-p551][ruby-]2.0.0[-p648][ruby-]2.1[.10][ruby-]2.2[.7][ruby-]2.3[.4][ruby-]2.4[.1]ruby-head 选择版本安装12//安装2.4.1rvm install 2.4.1 安装如果遇到如下错误：安装Command Line Tools即可1xcode-select --install 查看已安装的版本1rvm list 输出结果如下：12345rvm rubies=* ruby-2.4.1 [ x86_64 ]# =&gt; - current# =* - current &amp;&amp; default# * - default 查看当前使用的版本 1rvm current 设置默认版本 1rvm use 2.4.1 --default 删除安装过的版本 1rvm remove 2.2.2 如果提示权限不足，同理加上sudo1sudo rvm remove 2.2.2 二、升级RubyGems 在终端输入：1gem update --system 若果是最新，则输出：1Latest version currently installed. Aborting. 若果没有权限报错，在命令前加上sudo 1sudo gem update --system 更换源（最新使用的是：https://gems.ruby-china.org/） 123gem sources --remove https://rubygems.org/gem sources -a https://gems.ruby-china.org/ 查看ruby镜像 1gem source -l 输出结果：1https://gems.ruby-china.org/ 三、CocoaPods安装 终端输入 1sudo gem install -n /usr/local/bin cocoapods 安装了多个xcode进行选择 1sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer 安装本地库 1pod setup 执行上面的命令过后，会出现卡主不动，这个是时候是在下载，通常会等很久。这是后可以通过cmmand+n新创一个终端窗口，然后cd ~/.cocoapods/到该文件下，执行du -sh *查看大小：11015M repos 查看版本 1pod --version 升级CocoaPods 1sudo gem install -n /usr/local/bin cocoapods 四、CocoaPods使用工程导入三方库 创建一个工程test，终端切换到工程路径： 1cd 工程路径 终端输入： 1pod init 这时工程就会生成一个podfile 编辑podfile：1vim podfile 进入之后按i进入编辑模式，添加三方开源库如：pod &#39;AFNetworking&#39;(也可指定版本pod &#39;AFNetworking&#39;, &#39;~&gt; 3.1.0&#39;)，然后输入:wq回车保存。1234567891011121314# Uncomment the next line to define a global platform for your project# platform :ios, '9.0'pod 'AFNetworking'target 'test' do # Uncomment the next line if you're using Swift or would like to use dynamic frameworks # use_frameworks! # Pods for testend~ ~ ~ :wq 执行安装123pod install或pod install --no-repo-update 好了，到此CocoaPods的安装与使用都介绍完毕。 更新三方库 更新所有三方库 12//更新所有可更新的三方库pod update 间接更新三方库 12345678cd ~/.cocoapodslscd reposlscd masterlsls -agit pull 更新指定库 1pod update Masonry 省时更新方法 1pod update --verbose --no-repo-update 移除导入过的三方库 第一步：编辑podfile，将需要删除的三方库移除掉pod ‘AFNetworking’, ‘~&gt;3.1.0’ 第二步：执行pod install，重新编译，如果没有报错则移除成功1pod install 移除工程中CocoaPods 删除工程文件夹下的Podfile、Podfile.lock和Pods文件夹 删除xcworkspace文件 打开xcodeproj文件，删除项目中的libpods.a和Pods.xcconfig引用 打开Build Phases选项，删除Check Pods Manifest.lock和Copy Pods Resources主要就是上面四个步骤。问题解决1、执行gem update --system报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了,方法是忽略证书验证。步骤：前往~/.gemrc，打开文件，并添加:ssl_verify_mode: 012345678---:backtrace: false:bulk_threshold: 1000:sources:- https://gems.ruby-china.org/:update_sources: true:verbose: true:ssl_verify_mode: 0 cmmand+s保存，然后在执行sudo gem update --system，更新成功。 2、Unable to require openssl, install OpenSSL and rebuild ruby12345//如果没有安装openssl，则用honebrew安装brew install openssl//重装rvm并关联opensslrvm reinstall 2.4.0 --with-openssl-dir=`brew --prefix openssl` 如果安装了2.4.0版本则重新安装，没有安装则安装，安装成功之后，就能sudo gem update --system正常更新了。 总结 CocoaPods安装与使用就介绍到这里了，如果在以后CocoaPods安装使用工程中遇到问题，如果找到了解决方案，我也会贴出来。 参考文章 iOS 删除已经配置的类库和移除CocoaPods 使用CocoaPods（二）删除已经配置的类库和移除CocoaPods]]></content>
      <categories>
        <category>iOS</category>
        <category>CocoaPods</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>CocoaPods</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo七牛插件安装与使用]]></title>
    <url>%2F2018%2F01%2F23%2FHexo%E4%B8%83%E7%89%9B%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言本篇博客主要讲解七牛云插件安装与使用，博客中获取七牛云存储的图片主要有两种方式，一种是在七牛控制台中上传图片然后取图片外链地址，另外一种是用七牛云插件+标签语法将图片上传到七牛云并显示到我们所写的博客中，这里主要介绍第二种方式。 相关网址 hexo-qiniu-sync 七牛云 注册七牛个人账号 首先需要到七牛云官网注册个人账号。 进入控制台创建存储空间，如下图所示： 将融合 CDN默认域名添加到万网中，配置格式如下图所示： 安装七牛云插件 安装七牛云插件 1npm install hexo-qiniu-sync --save 配置相关信息 配置站点文件_config.yml，配置入内容（注意：添加到配置文件时，把//去掉） 12345678910111213141516171819202122232425262728#plugins:# - hexo-qiniu-syncqiniu: offline: false sync: true bucket: blogwenbo //这里将其注释掉，不注释，执行hexo g报错 # secret_file: sec/qn.json or C: access_key: your access_key secret_key: your secret_key // 上传的资源子目录前缀.如设置，需与urlPrefix同步 dirPrefix: static //外链前缀 urlPrefix: http://p2zukkwm9.bkt.clouddn.com/static //使用默认配置即可 up_host: http://upload.qiniu.com //本地目录 local_dir: static // 是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传) update_exist: true image: folder: images extend: js: folder: js css: folder: css 生成七牛配置路径，执行下面命令任意一个 1234567891011121314hexo s或hexo g//终端输出INFO -----------------------------------------------------------INFO qiniu state: onlineINFO qiniu sync: trueINFO qiniu local dir: staticINFO qiniu url: http://blogwenbo.com/staticINFO -----------------------------------------------------------INFO Start processingINFO Now start qiniu sync.INFO Need upload file num: 0 就会在static目录下生成images、css、js三个文件夹。这时我们把测试图片七牛云.png放在images文件夹下，然后按照如下标签语法书写： 1&#123;% qnimg 七牛云.png title:七牛云 alt:七牛云 'class:' extend:?imageView2/2/w/450 %&#125; ​ 同步静态资源到七牛云空间，主要有两种方式，一种是使用hexo命令，还有一种是使用七牛插件命令，可以参考GitHub文档：hexo-qiniu-sync 123456789101112//1、启用本地服务器.即使用 hexo server 命令（简写为 hexo s）//当以本地服务器模式启动后，会自动监测 local_dir 目录下的文件变化， 会自动将新文件进行上传。如果文件进行了修改，但设置中没有启用 update_exist 配置，则不会更新到七牛空间。hexo shexo server//2、使用命令行命令(sync | s | sync2 | s2)//命令行命令会扫描 local_dir 目录下的文件，同步至七牛空间。hexo qiniu synchexo qiniu shexo qiniu sync2hexo qiniu s2 图片处理可参考官方文档 图片基本处理 问题解决 没有注释secret_file: sec/qn.json or C:报错，如下图所示： 解决办法是将这段代码注释掉： 1# secret_file: sec/qn.json or C: hexo-qiniu-sync安装好后，hexo s命令不见了，hexo d也提示问题 #41 123//将其注释就好了#plugins:# - hexo-qiniu-sync ​ 结语自己也参考了一些文章，但讲解的都不是很详细完整，有些博客只讲解了重要的一些步骤，不管怎样，最后自己还是捣腾出来了，还是挺折腾人的，我也是第一次用七牛云存储图片，有些地方可能讲解的不是很完整，也请谅解。希望本篇博客能给你一些帮助，也欢迎大家一起交流学习。 参考文章Hexo 七牛同步插件的使用]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>七牛云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-NexT配置超炫网页效果]]></title>
    <url>%2F2018%2F01%2F20%2FHexo-NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言Hexo安装过后，默认的主题是landscape，如果不喜欢，我们也可以进行更换。本文主要讲解NexT主题的使用。先看下我博客网站的效果吧：blogwenbo.com Hexo主题相关网址 Hexo官网 Theme NexT 目录 NexT安装 切换主题 设置Menu 初始化对应的Menu文件夹 设置动态背景 在右上角或者左上角实现fork me on github 添加添加RSS 修改文章内链接文本样式 修改底部标签样式 在文章末尾添加“文章结束”标记 设置头像并设置动画效果 修改代码块``自定义样式 侧边栏社交小图标设置 主页文章添加阴影效果 网站底部加上访问量 添加热度 网站底部字数统计 设置网站的图标Favicon 实现文章统计功能 添加网页顶部进度加载条 添加来必力云跟帖功能 底部隐藏由Hexo强力驱动、主题–NexT.Mist 去掉底部重复字数统计 添加jiathis分享 博文置顶 修改字体大小 添加DaoVoice在线联系 添加底部桃心 添加侧栏推荐阅读 在文章底部增加版权信息 Hexo博客添加站内搜索 添加外链网易云音乐 NexT安装 切换到Blog文件夹下（就是hexo init的文件夹），查看文件 12345cd [Blog]ls_config.yml node_modules scaffolds themesdb.json package.json source 通过git安装，前提是你的电脑安装了git. 1git clone https://github.com/iissnan/hexo-theme-next themes/next 查看标签列表 12345git tag -l输出：...v5.1.3v5.1.4 切换到v5.1.4 123git checkout tags/v5.1.4输出：HEAD is now at 4f75fe5... 2018 NY update. 通过curl安装NexT 12mkdir themes/nextcurl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | cut -d '"' -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1 更新主题NexT 12cd themes/nextgit pull 切换成NexT主题，在hexo根文件夹下，编辑_config.yml文件 1234567theme: next//切换后，用命令清除下缓存hexo clean//执行hexo s本地产看NexT主题效果hexo s 切换主题 在列表中选择一款自己喜欢的主题风格。12345# Schemesscheme: Muse //默认主题#scheme: Mist#scheme: Pisces#scheme: Gemini 设置Menu 默认只有两个首页和归档，如下图所示： 如果还要添加，编辑themes/next/_config.yml： 12345678menu: home: / || home //首页 about: /about/ || user //关于 tags: /tags/ || tags //标签 categories: /categories/ || th //分类 archives: /archives/ || archive //归档 schedule: /schedule/ || calendar //日程表 sitemap: /sitemap.xml || sitemap //站点地图 将需要的Menu前面#号去掉。如下图所示: 初始化对应的Menu文件夹 没有创建Menu对应的文件夹，Blog/source文件目录如下： 在博客网站点击标签菜单可能会提示： 比如要创建标签文件夹，终端中输入（前提在Hexo文件路径下）： 123 hexo new page "tags"输出：INFO Created: ~/Desktop/MyBlog/Blog/source/tags/index.md 成功过后目录如下： 编辑Blog/source/tags中index.md文件，添加type: &quot;tags&quot;，其他Menu也同理创建。123title: tagsdate: 2018-01-20 18:57:48type: "tags" 设置动态背景 主题配置文件中找到canvas_nest，设置成ture就OK啦。12# Canvas-nestcanvas_nest: ture 在右上角或者左上角实现fork me on github 效果图如下图所示： 在GitHub Ribbons或GitHub Corners选择一款你喜欢的挂饰，拷贝方框内的代码： 将刚刚复制的挂饰代码，添加到Blog/themes/next/layout/_layout.swig文件中，添加位置如下图所示(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下方)：添加添加RSS 切换到Blog文件夹（hexo init的文件夹）下 1cd [Blog] 安装Hexo插件 1npm install --save hexo-generator-feed 安装成功之后，编辑Blog/_config.yml文件，在文件末尾添加 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 配置主题_config.yml文件，command+f搜索rss，在后面加上/atom.xml 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml //注意：有一个空格 之后，终端输入hexo s查看效果 1hexo s 修改文章内链接文本样式 修改Blog/themes/next/source/css/_common/components/post/post.styl，在末尾添加CSS样式： 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; //原始链接颜色 border-bottom: none; border-bottom: 1px solid #0593d3; //底部分割线颜色 &amp;:hover &#123; color: #fc6423; //鼠标经过颜色 border-bottom: none; border-bottom: 1px solid #fc6423; //底部分割线颜色 &#125;&#125; 设置后，效果如下： 修改底部标签样式 修改Blog\themes\next\layout\_macro\post.swig中文件，command+f搜索rel=&quot;tag&quot;&gt;#，将#替换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;。输入以下命令，查看效果：12hexo cleanhexo s 在文章末尾添加“文章结束”标记 在路径Blog\themes\next\layout\_macro文件夹中新建passage-end-tag.swig文件。 12345//切换到路径_macrocd [_macro路径]//创建passage-end-tag.swig文件touch passage-end-tag.swig 在passage-end-tag.swig添加以下内容，直接用文本编辑器打开，粘贴以下内容后保存 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开Blog\themes\next\layout\_macro\post.swig，在post-body之后，post-footer之前（post-footer之前两个DIV），添加以下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 添加位置，如下图所示： 修改主题配置文件_config.yml，在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 配置完成之后，效果如下： 设置头像并设置动画效果 在Blog/_config.yml中添加头像链接地址： 12//添加头像地址avatar: [ http://....] 设置头像圆角并旋转，打开Blog/themes/next/source/css/_common/components/sidebar/sidebar-author.styl，添加以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; 效果如下： 修改代码块``自定义样式 打开Blog\themes\next\source\css\_custom\custom.styl，添加以下代码：123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 侧边栏社交小图标设置 打开主题配置文件_config.yml，command+f搜索Social，将你有的社交账号前面的#号去掉。格式为：1[社交平台名]: [社交地址] || [图标名称] 12345678910111213#social: GitHub: https://github.com/yourname || github 简书: https://www.jianshu.com/u/63445e24e8bf || heartbeat 掘金: https://juejin.im/user/5a371ae551882512d0607108 || spinner #E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 效果图如下： 图标可以去Font Awesome Icon网站去找，找到后复制名字到相应的位置即可。 主页文章添加阴影效果 打开Blog\themes\next\source\css\_custom\custom.styl，添加以下代码： 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 效果如下： 网站底部加上访问量 打开Blog/themes/next/layout/_partials/footer.swig文件，在copyright加上如下代码：1&lt;script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 在适当的位置添加显示统计代码12345&lt;div class="powered-by"&gt;&lt;i class="fa fa-user-md"&gt;&lt;/i&gt;&lt;span id="busuanzi_container_site_uv"&gt; 本站访客数:&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; 设置统计方式 123456789//pv的方式，单个用户连续点击n篇文章，记录n次访问量&lt;span id="busuanzi_container_site_pv"&gt; 本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次&lt;/span&gt;//uv的方式，单个用户连续点击n篇文章，只记录1次访客数&lt;span id="busuanzi_container_site_uv"&gt; 本站总访问量&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;次&lt;/span&gt; 效果图如下： 添加热度 进入LeanCloud官网，进行账号注册。登录后，进入控制台，创建应用，应用名为Hexo如下图所示： 创建应用后，点击存储，创建Class，Class命名为Counter，操作如下图所示： 查看AppID和AppKey，如下图所示： 打开Blog/themes/next/layout/_macro/post.swig，command+F搜索leancloud-visitors-count，在图片位置加入&lt;span&gt;℃&lt;/span&gt;，如下图所示： 编辑主题配置文件，command+f搜索leancloud_visitors，将其值设为：ture，将AppID和AppKey粘贴到相应位置： 123456# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: ture app_id: app_id app_key: app_key 效果图如下图所示： 网站底部字数统计 安装hexo插件，切换到根目录： 1npm install hexo-wordcount --save 在Blog/themes/next/layout/_partials/footer.swig末尾添加代码： 1234&lt;div class="theme-info"&gt; &lt;div class="powered-by"&gt;&lt;/div&gt; &lt;span class="post-count"&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; 效果图如下图所示： 设置网站的图标Favicon 在图标网站找一张你喜欢的图标（大：32x32 小：16x16），图标网站：easyicon或者阿里巴巴矢量图标库。将下载下来的小图和中图放在Blog/themes/next/source/images，将默认的两张图片替换掉。命名和默认的一样也可以自己定义： 修改主题配置文件，如果你自定义了图片名字，需要做修改： 123456789# For example, you put your favicons into `hexo-site/source/images` directory.# Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.favicon: small: /images/favicon-16x16-next.png //16X16小图 medium: /images/favicon-32x32-next.png //32X32大图 apple_touch_icon: /images/apple-touch-icon-next.png //apple-touch-icon safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 修改后，效果如下： 实现文章统计功能 安装Hexo插件，参考网站底部字数统计。 编辑主题配置文件，配置如下： 12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true 效果图： 添加网页顶部进度加载条 编辑主题配置文件，command+F搜索pace，将其值改为ture就可以了，选择一款你喜欢的样式。12345678910111213141516171819# Progress bar in the top during page loading.pace: ture# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-minimal 添加来必力云跟帖功能 首先去来必力注册账号，然后进入后台管理系统，如下图所示：拷贝data-uid，如下图所示： 编辑主题配置文件，command+F搜索livere_uid，将刚刚拷贝的data-uid粘贴到相应位置： 123# Support for LiveRe comments system.# You can get your uid from https://livere.com/insight/myCode (General web site)livere_uid: livere_uid 之后部署查看效果： 底部隐藏由Hexo强力驱动、主题–NexT.Mist 打开Blog/themes/next/layout/_partials/footer.swig，注释掉相应代码。 12345678910111213141516171819202122232425262728293031//用下面的符号注释，注释代码用下面括号括起来&lt;!-- --&gt;&lt;!--&lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% if theme.footer.powered %&#125; &lt;div class="powered-by"&gt;&#123;# #&#125;&#123;&#123; __('footer.powered', '&lt;a class="theme-link" target="_blank" href="https://hexo.io"&gt;Hexo&lt;/a&gt;') &#125;&#125;&#123;##&#125;&lt;/div&gt;&#123;% endif %&#125;&#123;% if theme.footer.powered and theme.footer.theme.enable %&#125; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125;&#123;% if theme.footer.theme.enable %&#125; &lt;div class="theme-info"&gt;&#123;# #&#125;&#123;&#123; __('footer.theme') &#125;&#125; &amp;mdash; &#123;# #&#125;&lt;a class="theme-link" target="_blank" href="https://github.com/iissnan/hexo-theme-next"&gt;&#123;# #&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;# #&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; theme.version &#125;&#125;&#123;% endif %&#125;&#123;##&#125;&lt;/div&gt;&#123;% endif %&#125;&#123;% if theme.footer.custom_text %&#125; &lt;div class="footer-custom"&gt;&#123;# #&#125;&#123;&#123; theme.footer.custom_text &#125;&#125;&#123;##&#125;&lt;/div&gt;&#123;% endif %&#125;--&gt; 注释掉后效果如下： 去掉底部重复字数统计 未去掉前，如下图所示： 注释掉如下代码：1234567891011121314&lt;!-- &#123;% if theme.post_wordcount.totalcount %&#125; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-area-chart"&gt;&lt;/i&gt; &lt;/span&gt; &#123;% if theme.post_wordcount.item_text %&#125; &lt;span class="post-meta-item-text"&gt;&#123;&#123; __('post.totalcount') &#125;&#125;&amp;#58;&lt;/span&gt; &#123;% endif %&#125; &lt;span title="&#123;&#123; __('post.totalcount') &#125;&#125;"&gt;&#123;# #&#125;&#123;&#123; totalcount(site, '0,0.0a') &#125;&#125;&#123;# #&#125;&lt;/span&gt; &#123;% endif %&#125;--&gt; 添加jiathis分享 编辑主题配置文件，将jiathis改为ture即可： 1234567# Share# This plugin is more useful in China, make sure you known how to use it.# And you can find the use guide at official webiste: http://www.jiathis.com/.# Warning: JiaThis does not support https.jiathis: ture ##uid: Get this uid from http://www.jiathis.com/#add_this_id: 效果如下图所示： 博文置顶 修改hexo-generator-index插件，把node_modules/hexo-generator-index/lib/generator.js中代码替换为： 12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 文章添加Top值，值越大，越靠前： 123456789---title: Hexo-NexT主题配置date: 2018-01-20 20:41:08categories: Hexotags:- Hexo- NexTtop: 100--- 修改字体大小 编辑Blog/themes/next/source/css/_variables/base.styl，command+F搜索$font-size-base，修改为你想要的大小：12// Font size$font-size-base = 16px 添加DaoVoice在线联系 首先到DaoVoice注册账号，登录成过后，进入到后台管理，点击应用设置——&gt;安装到网站查看安装代码和AppID。 将安装代码添加到Blog/themes/next/layout/_partials/head.swig中：123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;" &#125;); daovoice('update'); &lt;/script&gt;&#123;% endif %&#125; 编辑主题配置文件，添加如下代码： 123# Online contact daovoice: truedaovoice_app_id: daovoice_app_id 效果图如下所示： 添加底部桃心 打开Blog/themes/next/layout/_partials/footer.swig搜索with-love，在fontawesom找到你喜欢的图标，在如下位置替换即可： 效果如下图所示：添加侧栏推荐阅读 编辑主题配置文件，如下配置即可： 12345678# Blog rollslinks_icon: linklinks_title: 推荐阅读#links_layout: blocklinks_layout: inlinelinks: Swift 4: https://developer.apple.com/swift/ Objective-C: https://developer.apple.com/documentation/objectivec 效果如下图所示： 在文章底部增加版权信息 在目录Blog/themes/next/layout/_macro/，添加文件 my-copyright.swig，内容如下： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class="my_post_copyright"&gt; &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src="https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href="/" title="访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class="copy-path" title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;" aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); $(".fa-clipboard").click(function()&#123; clipboard.on('success', function()&#123; swal(&#123; title: "", text: '复制成功', icon: "success", showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录Blog/themes/next/source/css/_common/components/post/下添加文件my-post-copyright.styl，添加以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 在Blog/themes/next/source/css/_common/components/post/添加文件my-post-copyright.styl，文件内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改Blog/themes/next/layout/_macro/post.swig，在如图位置添加以下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'my-copyright.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 在Blog/themes/next/source/css/_common/components/post/post.styl文件最后加入下面的代码： 1@import "my-post-copyright" 在Markdown文章中加入copyright : ture： 12345678910---title: Hexo-NexT主题配置date: 2018-01-20 20:41:08categories: Hexotags:- Hexo- NexTtop: 100copyright: ture--- 配置根目录下的_config.yml文件，配置为： 123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://wenmobo.github.io/ //你的网站地址root: /permalink: :year/:month/:day/:title/permalink_defaults: 效果图如下所示： Hexo博客添加站内搜索 NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia。下面介绍Local Search的安装吧。 安装 hexo-generator-search 1npm install hexo-generator-search --save 安装 hexo-generator-searchdb 1npm install hexo-generator-searchdb --save 编辑站点配置文件，添加以下内容： 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，设置Local searchenable为ture 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: ture # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 效果如下图所示： 添加外链网易云音乐 打开网易云音乐，注册并登陆你的账号号，点击右上角进入我的主页： 选择一首你喜欢的歌曲或者创建一个喜欢的歌单，进入详情： 点击生成外链播放器 进入详情，设置喜欢的样式，拷贝代码： 将代码粘贴到一个合适的位置，我的粘贴在Blog/themes/next/layout/_macro/sidebar.swig文件下： 1&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=310 height=110 src="//music.163.com/outchain/player?type=0&amp;id=371085186&amp;auto=1&amp;height=90"&gt;&lt;/iframe&gt; 效果如下： 问题解决1、博客集成来必力后，标签、分类、分类显示评论组件，这里需要隐藏 打开根目录，找到如下文件夹： 编辑index.md文件，添加comments将其值设为false: 123456---title: tagsdate: 2018-01-20 18:57:48type: "tags"comments: false--- 然后执行，就没有评论框了： 123hexo cleanhexo ghexo d 总结终于搭建好自己的小窝啦，这里是我的成果： blogwenbo.com，从最开始无从下手，到一步步搭建起各种效果，自己还是挺有成就感的，虽然让自己折腾了好几天，但还是值得的，在搭建的过程中，自己也参考了很多优秀的博客，非常感谢博主的无私分享。如果以后有更多好看炫酷的效果，我也会在本篇博文中更新。如果你也想开始搭建自己的专属静态博客，就赶快行动吧！ 参考文章 hexo的next主题个性化教程:打造炫酷网站 hexo 搜索功能 hexo+next主题优化之加入网易云音乐、网易云跟帖、炫酷动态背景]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo配置与使用]]></title>
    <url>%2F2018%2F01%2F20%2FHexo%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言GitPages+Hexo搭建个人博客这篇文章已经介绍了GitHubPages创建博客和Hexo的安装，下面开始介绍Hexo基本配置。 目录 配置_config.yml文件 Hexo常用命令 Hexo插件安装配置_config.yml文件 站点配置（重要） 1234567# Sitetitle: WenBo丨星空灬 //网站标题subtitle: To strive, to seek, to find, and not to yield. //网站副标题description: To strive, to seek, to find, and not to yield. //网站副标题author: WenBo //您的名字language: zh-Hans //网站使用的语言 简体中文 zh-Hanstimezone: //网站时区。Hexo 默认使用您电脑的时区 URL配置 1234567# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://blogwenbo.com/ //网址root: / //网站根目录permalink: :year/:month/:day/:title/ //| 文章的 [永久链接](https://hexo.io/zh-cn/docs/permalinks.html) 格式 | `:year/:month/:day/:title/` |permalink_defaults: //永久链接中各部分的默认值 目录配置 123456789# Directorysource_dir: source //资源文件夹，这个文件夹用来存放内容。默认值：sourcepublic_dir: public //公共文件夹，这个文件夹用于存放生成的站点文件。默认值：publictag_dir: tags //标签文件夹 默认值：tagsarchive_dir: archives //归档文件夹 默认值：archivescategory_dir: categories //分类文件夹 默认值：categoriescode_dir: downloads/code //Include code 文件夹 默认值：downloads/codei18n_dir: :lang //国际化（i18n）文件夹 默认值：:langskip_render: README.md //跳过指定文件的渲染，您可使用 [glob 表达式](https://github.com/isaacs/node-glob)来匹配路径。 Git部署配置（重要） 1234deploy: type: git //填git repo: git@github.com:wenmobo/wenmobo.github.io.git //SSH地址 branch: master //分支 配置README.md找到skip_render，并添加README.md 1skip_render: README.md 切换主题 12345例如：切换成NexT主题，在hexo根文件加下，编辑**_config.yml**文件theme: next//配置之后，执行以下命令清除一下缓存hexo clean Hexo命令 初始化文件夹网站（重要） 12345//Hexo 默认在目前的文件夹建立网站hexo init//指定文件夹hexo init [folder] 新建一篇文章（重要） 1hexo new "my blog" 生成静态文件（重要） 12345678hexo generate//简写hexo g选项 描述-d, --deploy 文件生成后立即部署网站-w, --watch 监视文件变动 发表草稿 1hexo publish [layout] &lt;filename&gt; 启动服务器。默认情况下，访问网址为： http://localhost:4000/（重要） 123456789hexo server//简写hexo s选项 描述-p, --port 重设端口-s, --static 只使用静态文件-l, --log 启动日记记录，使用覆盖记录格式 部署网站（重要） 1234 hexo deploy//简写hexo d 查看hexo版本 1234hexo version//简写 hexo v 新建页面（重要）12//比如说新建标签页面，执行命令之后会在根目录source文件夹下创建tags文件夹hexo new page "tags" Hexo插件安装 Hexo安装Git插件（重要）1npm install --save hexo-deployer-git 总结参看了一些博客，配置好上面这些内容，和熟悉上面这些常用命令，自己也能用Hexo创建博客了，自己也是才开始搭建自己的博客，有些整理的还不是很完善，以后会继续补充。下面一片文章是讲解如何安装使用Next主题的博客：Hexo-NexT配置超炫网页效果。有兴趣的同学，可以来看看吧。 参考文章 hexo教程系列——hexo配置教程 指令 | Hexo]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHubPages+Hexo搭建个人博客]]></title>
    <url>%2F2018%2F01%2F20%2FGitHubPages-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言如果你想从零开始搭建一个属于自己的静态博客网站，可以参考下面三篇博文，这三篇博文是记录我从零开始搭建自己静态博客的全过程，希望能给需要的朋友一些参考： GitPages+Hexo搭建个人博客 Hexo相关配置和使用 Hexo-NexT配置超炫网页效果 最终成果： blogwenbo.com 一、GitHub创建项目 1.1 使用GitPages搭建自己静态博客前提要注册申请GitHub账号。GitHub相关配置可参考这篇文章：MAC上Git安装与GitHub基本使用。 1.2 GitHub上新创建一个wenmobo.github.io仓库，wenmobo是我的账号名，这里替换成你自己的就可以了。项目格式名称为[用户名].github.io，如下：1username.github.io 创建成功之后如下： 1.3 在桌面新建一个文件夹MyBlog，cd到该文件夹，将项目克隆到本地：1git clone git@github.com:wenmobo/wenmobo.github.io.git 二、安装Node.js 2.1 Node.js支持用HomeBrew安装，首先要安装Homebrew，Homebrew安装可查看这篇文章：MAC上Homebrew常用命令整理 2.2 Homebrew安装好之后，用Homebrew安装Node.js，终端输入：1brew node 三、安装hexo 3.1 安装hexo，终端输入： 1npm install -g hexo-cli 3.2 在本地仓库MyBlog新建文件夹Blog，然后在终端cd [Blog文件夹路径]，执行以下命令初始化博客： 123456hexo init//或者hexo init &lt;folder&gt;cd &lt;folder&gt;npm instal 成功之后，目录文件如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 3.3 查看本地效果，终端输入：1hexo s 终端输出：123WMBdeMacBook-Pro:Hexo WENBO$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 将http://localhost:4000/.拷贝到Chome浏览器，查看效果，如下图所示： 四、总结 GitHubPages+Hexo搭建静态博客的准备工作到这里都完成了，下面一篇文章：Hexo相关配置和使用会介绍Hexo相关配置。 五、参考文章1、GithubPages教程 在GithubPages上搭建个人主页2、在Github上使用Hexo搭建个人博客3、如何使用hexo搭建个人博客（Mac OS系统，windows仅作参考）4、Hexo博客主题推荐](https://www.jianshu.com/p/bcdbe7347c8d)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
